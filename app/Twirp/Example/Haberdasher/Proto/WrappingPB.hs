-- Code generated by protoc-gen-haskell 0.1.0, DO NOT EDIT.
{-# LANGUAGE DerivingVia, DeriveAnyClass, DuplicateRecordFields #-}
{-# OPTIONS_GHC -Wno-unused-imports -Wno-missing-export-lists #-}
module Haberdasher.Proto.WrappingPB where

import           Control.DeepSeq
import           Control.Monad (msum)
import qualified Data.Aeson as A
import qualified Data.Aeson.Encoding as E
import           Data.ByteString (ByteString)
import           Data.Int
import           Data.Text (Text)
import qualified Data.Text as T
import           Data.Vector (Vector)
import           Data.Word
import           GHC.Generics
import           Proto3.Suite (decodeMessageField, encodeMessageField, nestedvec, packedvec)
import qualified Proto3.Suite as Proto3
import           Proto3.Suite.JSONPB as JSONPB
import           Proto3.Wire (at, oneof)

import qualified Data.Color

data Car = Car
  { manufacturer :: Text
  , color :: Data.Color.Color
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Proto3.Named, NFData)

instance FromJSONPB Car where
  parseJSONPB = A.withObject "Car" $ \obj -> Car
    <$> obj .: "manufacturer"
    <*> obj .: "color"

instance ToJSONPB Car where
  toJSONPB Car{..} = object
    [
      "manufacturer" .= manufacturer
    , "color" .= color
    ]
  toEncodingPB Car{..} = pairs
    [
      "manufacturer" .= manufacturer
    , "color" .= color
    ]

instance FromJSON Car where
  parseJSON = parseJSONPB

instance ToJSON Car where
  toJSON = toAesonValue
  toEncoding = toAesonEncoding

instance Proto3.Message Car where
  encodeMessage _ Car{..} = mconcat
    [
      encodeMessageField 1 manufacturer
    , encodeMessageField 2 color
    ]
  decodeMessage _ = Car
    <$> at decodeMessageField 1
    <*> at decodeMessageField 2
  dotProto = undefined
